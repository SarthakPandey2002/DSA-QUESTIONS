Count Unreachable Pairs of Nodes in an Undirected Graph

You are given an integer n. There is an undirected graph with n nodes, numbered from 0 to n - 1.
You are given a 2D integer array edges where edges[i] = [ai, bi] denotes that there 
exists an undirected edge connecting nodes ai and bi.

Return the number of pairs of different nodes that are unreachable from each other.

class Solution {
public:
    typedef long long ll;
    
    void dfs(unordered_map<int,vector<int>>&adj,vector<bool>&vis,ll &cnt,int u){
       vis[u]=true;
        cnt++;
        for(auto x:adj[u]){
            if(!vis[x])
              dfs(adj,vis,cnt,x);  
        }
    }
    
    long long countPairs(int n, vector<vector<int>>& e) {
        unordered_map<int,vector<int>>adj;
        vector<bool>vis(n,false);
        for(int i=0;i<e.size();i++){
            int a=e[i][0];
            int b=e[i][1];
            adj[a].push_back(b);
            adj[b].push_back(a);
        }
        ll ans=((ll)n*(n-1))/2;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                ll cnt=0;
                dfs(adj,vis,cnt,i);
                ans-=(ll(cnt*(cnt-1))/2);
            }
        }
        return ans;
    }
};
