class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        vector<int>cur(m,0);
        vector<int>prev(m,0);
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j==0)
                    cur[0]=grid[0][0];
                else{
                     int up=grid[i][j];
                int left=grid[i][j];
                if(i>0)
                    up+=prev[j];
                    else
                 up+=1e3;
                if(j>0)
                    left+=cur[j-1];
                else
                    left+=1e3;
               cur[j]=min(left,up);   
                }
            }
            prev=cur;
        }
        return prev[m-1];
    }
};

class Solution {
public:
    int t[201][201];
    int f(int i,int j,vector<vector<int>>& grid){
        if(i<0 || j<0)
            return 1e6;
        if(i==0 && j==0)
            return grid[i][j];
        if(t[i][j]!=-1)
            return t[i][j];
        int up=grid[i][j]+f(i-1,j,grid);
        int left=grid[i][j]+f(i,j-1,grid);
        return t[i][j]=min(up,left);
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        memset(t,-1,sizeof(t));
        return (f(n-1,m-1,grid));
    }
};
