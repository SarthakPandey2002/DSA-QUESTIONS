#include <bits/stdc++.h> 

int t[100001];
int solve(int idx,vector<int> &heights){
    int n=heights.size();
   if(idx==0)
   return 0;
   if(idx<0)
   return INT_MAX;
   if(t[idx]!=-1)
   return t[idx];
    int a=abs(heights[idx]-heights[idx-1])+solve(idx-1,heights);
    int b=INT_MAX;
    if(idx>1){
        b=abs(heights[idx]-heights[idx-2])+solve(idx-2,heights);
    } 
    return t[idx]=min(a,b);
}

int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    memset(t,-1,sizeof(t));
    return solve(n-1,heights);
}

#include <bits/stdc++.h> 
int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    vector<int>dp(n);
    dp[0]=0;
    for(int i=1;i<n;i++){
        int a=dp[i-1]+abs(heights[i]-heights[i-1]);
        int b=INT_MAX;
        if(i>1)
        b=dp[i-2]+abs(heights[i]-heights[i-2]);
        dp[i]=min(a,b);
    }
    return dp[n-1];
}
